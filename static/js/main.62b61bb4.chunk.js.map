{"version":3,"sources":["MovieCard.js","MovieCardsList.js","NominationList.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","props","nominated","this","card_type","nominationList","length","i","imdbID","id","button","margin","colorScheme","variant","position","isDisabled","onClick","onItemClick","value","index","w","borderWidth","borderRadius","overflow","src","poster","fallbackSrc","width","height","objectFit","p","d","alignItems","px","type","color","fontWeight","letterSpacing","fontSize","textTransform","ml","year","mt","as","lineHeight","title","React","Component","MovieCardsList","element","movies","map","item","Title","Year","Type","Poster","minChildWidth","rowGap","columnGap","NominationList","arr","onNominate","App","state","search_term","loading","nominations","handleChange","bind","handleSubmit","handleNominate","handleRemoveNominate","console","log","setState","http","XMLHttpRequest","url","open","send","onreadystatechange","e","readyState","status","json","JSON","parse","responseText","movies_arr","Object","keys","forEach","key","push","event","preventDefault","moviesList","target","to_nominate","splice","search_response","thickness","speed","emptyColor","size","alert","padding","marginTop","marginBottom","onSubmit","pointerEvents","children","Search2","onChange","marginLeft","marginRight","minH","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62b61bb4.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, Image, Badge, Button } from \"@chakra-ui/react\"\n\nclass MovieCard extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.nominated = false;\n    }\n\n    render(){\n        if(this.props.card_type == 'result'){\n            if((this.props.nominationList).length === 0){\n                this.nominated = false;\n            }\n            for(let i = 0; i < (this.props.nominationList).length; ++i){\n                if(this.props.nominationList[i].imdbID === this.props.id){\n                    this.nominated = true;\n                    break;\n                }else{\n                    this.nominated = false;\n                }\n            }\n            var button = <Button margin='5px' colorScheme=\"teal\" variant=\"solid\" position='absolute' isDisabled={this.nominated} onClick={this.props.onItemClick} value={this.props.index}>Nominate</Button>\n        }else{\n            var button = <Button margin='5px' colorScheme=\"red\" variant=\"solid\" position='absolute' onClick={this.props.onItemClick} value={this.props.index}>Remove</Button>\n        }\n        \n\n        return(\n        <Box w=\"250px\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\n            {button}\n            <Image src={this.props.poster} fallbackSrc=\"https://via.placeholder.com/300\" width='250px' height='250px' objectFit='cover'/>\n            <Box p=\"6\">\n                <Box d=\"flex\" alignItems=\"baseline\">\n                    <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\n                        {this.props.type}\n                    </Badge>\n                    <Box\n                        color=\"gray.500\"\n                        fontWeight=\"semibold\"\n                        letterSpacing=\"wide\"\n                        fontSize=\"xs\"\n                        textTransform=\"uppercase\"\n                        ml=\"2\"\n                    >\n                        Release: {this.props.year}\n                    </Box>\n                </Box>\n\n                <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h4\"\n                lineHeight=\"tight\"\n                >\n                    {this.props.title}\n                </Box>\n            </Box>\n        </Box>\n        )\n    }\n}\nexport default MovieCard;","import React from 'react'\nimport MovieCard from './MovieCard.js'\nimport {SimpleGrid, Box, Center, Spinner} from \"@chakra-ui/react\"\n\nclass MovieCardsList extends React.Component{\n\n    render(){\n        var element = <h3>error</h3>\n        if(this.props.movies == null || (this.props.movies).length === 0){\n            element = <h3>No Results</h3>\n        }else{\n\n        \n            // Object.keys(json).forEach(function(key) {\n            //     //console.log(json[key])\n            //     arr.push(json[key]);\n                \n            // });\n            //console.log(arr)\n            element = (this.props.movies).map((item, index) => <MovieCard key={index} id={item.imdbID} title={item.Title} year={item.Year} type={item.Type} poster={item.Poster} onItemClick={this.props.onItemClick} nominationList={this.props.nominationList} index={index} nominated={this.nominated} card_type=\"result\"/>)\n\n        }\n\n        return(\n            <SimpleGrid minChildWidth=\"250px\" rowGap='20px' columnGap='50px'>{element}</SimpleGrid>\n        )\n        \n    }\n}\n\nexport default MovieCardsList;","import React from 'react'\nimport MovieCard from './MovieCard'\nimport {Wrap} from '@chakra-ui/react'\n\nclass NominationList extends React.Component{\n    render(){\n\n        var arr = this.props.movies;\n\n        return <Wrap>{arr.map((item, index) => <MovieCard key={index} title={item.Title} year={item.Year} type={item.Type} poster={item.Poster} onNominate={this.props.onNominate} index={index} card_type=\"nominated\" onItemClick={this.props.onItemClick}/>)}</Wrap>\n    }\n}\nexport default NominationList;","import React from 'react'\nimport './App.css';\nimport MovieCardsList from './MovieCardsList';\nimport NominationList from './NominationList'\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Center,\n  InputLeftElement,\n  InputGroup,\n  Spinner\n} from \"@chakra-ui/react\"\n\nimport {Search2Icon} from \"@chakra-ui/icons\"\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {movies: [], search_term: \"error\", loading:false, nominations: []};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNominate = this.handleNominate.bind(this);\n    this.handleRemoveNominate = this.handleRemoveNominate.bind(this);\n  }\n\n  moviesList(){\n    console.log('MAKING REQUEST')\n    this.setState({loading: true}, ()=>{\n      const http = new XMLHttpRequest();\n      const url = `https://www.omdbapi.com/?s=${this.state.search_term}&apikey=e2878480&`\n      http.open(\"GET\", url)\n      http.send()\n\n      http.onreadystatechange = (e) => {\n        console.log(http.readyState, http.status)\n        if(http.readyState === 4 && http.status === 200){\n\n          var json = JSON.parse(http.responseText)['Search'];\n          var movies_arr = []\n          if(json != null){\n            Object.keys(json).forEach(function(key) {\n              if(json[key].Type == 'movie'){\n                movies_arr.push(json[key]);\n              }\n            });\n          }\n\n\n          this.setState({\n            movies: movies_arr,\n            loading: false\n          });\n          console.log(\"API CALL RECIEVED\")\n        }\n      }\n    });\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    this.moviesList();\n  }\n\n  handleChange(event){\n    this.setState({ search_term: event.target.value})\n  }\n\n  handleNominate(event){\n    let to_nominate = this.state.movies[event.target.value];\n    //event.target.disabled = true;\n    if((this.state.nominations).length < 5){\n      this.setState({ nominations: [...this.state.nominations, to_nominate] })\n    }\n  }\n\n  handleRemoveNominate(event){\n    //let denominate = this.state.nominations[event.target.value];\n    //event.target.disabled = true;\n    var arr = this.state.nominations;\n    arr.splice(event.target.value,1)\n    this.setState({ nominations: arr })\n    //console.log('denominate', event.target.value, this.state.nominations)\n  }\n\n  render(){\n\n    if(this.state.loading){\n      var search_response = <Center><Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\"/></Center>;\n    }else{\n      var search_response = <MovieCardsList onItemClick={this.handleNominate} movies={this.state.movies} loading={this.state.loading} nominationList={this.state.nominations}/>  \n    }\n\n    if((this.state.nominations).length === 5){\n      alert(\"You have finished nominating :)\")\n    }\n\n    return (\n      <div>\n        <Center>\n          <Box w=\"50%\" borderWidth=\"1px\" borderRadius=\"lg\" padding='10px' marginTop='100px' marginBottom = '70px'>\n            <form onSubmit={this.handleSubmit}>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement pointerEvents=\"none\" children={<Search2Icon color=\"gray.300\"/>} />\n                  <Input type='field' id='search_field' value={this.state.value} onChange={this.handleChange}/>\n                </InputGroup>\n                <FormHelperText>Search for and nominate your favorite movies :)</FormHelperText>\n              </FormControl>\n            </form>\n          </Box> \n        </Center>\n        <Box borderWidth=\"1px\" borderRadius=\"lg\" padding='30px' marginLeft='100px' marginRight='100px' minH='150px'>\n          <FormLabel>Nomination List</FormLabel>\n          <NominationList movies={this.state.nominations} onItemClick={this.handleRemoveNominate}/>  \n        </Box>\n        <Box borderWidth=\"1px\" borderRadius=\"lg\" padding='30px' marginTop='40px' marginLeft='100px' marginRight='100px' minH='300px'>\n          <FormLabel>Search Results</FormLabel>\n          {search_response} \n        </Box>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}